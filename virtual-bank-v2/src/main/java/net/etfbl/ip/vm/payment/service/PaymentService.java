package net.etfbl.ip.vm.payment.service;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;

import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.ws.rs.core.Response;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

import net.etfbl.ip.vm.dao.CreditCardDAO;
import net.etfbl.ip.vm.dao.MuseumDAO;
import net.etfbl.ip.vm.dao.TicketDAO;
import net.etfbl.ip.vm.dao.TourDAO;
import net.etfbl.ip.vm.dao.TransactionDAO;
import net.etfbl.ip.vm.dao.UserDAO;
import net.etfbl.ip.vm.dto.CreditCard;
import net.etfbl.ip.vm.dto.Museum;
import net.etfbl.ip.vm.dto.Ticket;
import net.etfbl.ip.vm.dto.Tour;
import net.etfbl.ip.vm.dto.Transaction;
import net.etfbl.ip.vm.dto.User;
import net.etfbl.ip.vm.payment.model.PaymentDetails;

public class PaymentService {

	public PaymentService() {
		// TODO Auto-generated constructor stub
	}
	
	public Ticket buyTicket(PaymentDetails payment) throws Exception{
		CreditCard card = CreditCardDAO.getCardByNumber(payment.getCardNumber());
		Ticket ticket = null;
		
		if(card!=null) {
			System.out.println(card);
			BigDecimal tourPrice = TourDAO.getTourPrice(payment.getTourId());
			
			if(!card.getPin().equals(payment.getPin()))
				throw new Exception("Incorrect pin code.");
			if(!card.getExpirationDate().equals(payment.getExpDate()))
				throw new Exception("Expiration date mismatch.");
			if(!card.getType().equals(payment.getType()))
				throw new Exception("Card type mismatch.");
			if(!card.isActive())
				throw new Exception("Credit card disabled.");			
			if(CreditCardDAO.cardExpired(card))
				throw new Exception("Credit card has expired.");
			
			if(card.getBalance().compareTo(tourPrice) < 0)
				throw new Exception("There's not enough money on the card for this transaction.");
			
			
			////// else - kupovina karte
			// umanjiti iznos na kartici
			CreditCardDAO.updateBalance(card.getId(), tourPrice);
//			System.out.println(CreditCardDAO.getCardByNumber(card.getNumber()));
			
			// evidentirati transakciju
			TransactionDAO.newTransaction(new Transaction(card.getId(),tourPrice));			
			
			// generisati kartu
			ticket = new Ticket(payment.getTourId(),payment.getUserId());
			TicketDAO.issueTicket(ticket);			
			
			
			// napraviti pdf
			createPDF(ticket);
			
			// poslati generisanu kartu na mail
			User user = UserDAO.getUserById(ticket.getUserId());

			sendEmail(user.getEmail());
			
		}
		return ticket;
	}
	
	private void createPDF(Ticket ticket) {
		Document document = new Document();
		Tour tour = TourDAO.getTourById(ticket.getTourId());
		User user = UserDAO.getUserById(ticket.getUserId());
		Museum museum = MuseumDAO.getMuseumById(tour.getMuseumId());
		
		try {
			File file = new File("ticket.pdf");
			FileOutputStream fos = new FileOutputStream(file);
			
			System.out.println(file.getAbsolutePath());
			PdfWriter.getInstance(document, fos);
			
			document.open();
			Font title = FontFactory.getFont(FontFactory.COURIER, 18, BaseColor.BLACK);
			Font info = FontFactory.getFont(FontFactory.COURIER, 16, BaseColor.BLACK);
			
			Chunk titleChunk = new Chunk("TOUR TICKET", title);
			
			String details = "Tour: Explore " + museum.getName() + "\n"
							+"Start: " + tour.getStart() +"\n"
							+"Duration: " + tour.getDuration() +" hours \n" 
							+"Price: $ " + tour.getPrice() + "\n"
							+"------------------------------------------------------\n"
							+"Ticket number: " + ticket.getId();
			
			
				
			
			Chunk infoChunk = new Chunk(details, info);
			Paragraph paragraph = new Paragraph(infoChunk);
			document.add(titleChunk);
			document.add(paragraph);
			document.close();
			System.out.println("PDF KREIRAN");
			
			
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
		} catch (DocumentException e) {
			
			e.printStackTrace();
		}

		
	}
	
	private void sendEmail(String to) throws Exception {
	
		
	  final String username = "virtualmuseum.ip@gmail.com";//username generated by Mailtrap
	  final String password = "";//password
	 	
	  Properties prop = new Properties();
	   prop.put("mail.smtp.host", "smtp.gmail.com");
	   prop.put("mail.smtp.port", "587");
       prop.put("mail.smtp.auth", "true");
	   prop.put("mail.smtp.starttls.enable", "true");//it’s optional in Mailtrap
	   
		
		Session session =Session.getInstance(prop, new Authenticator() {
		    @Override
		    protected PasswordAuthentication getPasswordAuthentication() {
		        return new PasswordAuthentication(username, password);
		    }
		});
		
		Message message = new MimeMessage(session); 
		message.setFrom(new InternetAddress("virtualmuseum.ip@gmail.com")); 
		message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to)); 
		message.setSubject("Virtual Tour Ticket"); 

		BodyPart messageBodyPart = new MimeBodyPart(); 
		messageBodyPart.setText("Here's your ticket!");
		
		MimeBodyPart attachmentBodyPart = new MimeBodyPart();
		attachmentBodyPart.attachFile(new File("ticket.pdf"));
		
		Multipart multipart = new MimeMultipart();
		multipart.addBodyPart(messageBodyPart);
		multipart.addBodyPart(attachmentBodyPart);
		
		message.setContent(multipart);
		Transport.send(message);
		System.out.println("Email sent");
	}

}
